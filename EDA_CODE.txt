# SPARKS FOUNDATION

Author -YASH DIXIT

Dataset=https://bit.ly/3i4rbWl

BATCH-GRIPAUGUST21
"""

#libraries used
#pandas ,numpy ,matplotlib,seaborn

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf

data=pd.read_csv('SampleSuperstore.csv')

raw_data=data.copy()

"""THIS WILL SIMPLY PICK OUT 5 RANDOM ROWS FROM THE DATASET"""

raw_data.sample(5)

"""### NOW WE WILL LOOK THE NUMBER OF MISSING VALUES PRESENT IN THE DATASET IN EACH OF THE FEATURES"""

raw_data.isnull().sum()

"""Now if we wish to find the total no of null values """

print("Total_null = ",raw_data.isnull().sum().sum())

print(raw_data.info())

raw_data.describe()

raw_data.dtypes

raw_data.shape

"""Now lets check for the duplicate rows"""

raw_data.duplicated().sum()

"""Now we know that duplicates can cause our model to predict wrong output therefore we will drop the duplicate rows """

raw_data.drop_duplicates()

"""
Now we will obtain various statistical inferences from the datset including the covariance , corelation."""

print("Correaltion:",raw_data.corr(),"Covariance",raw_data.cov(),sep="\n")

print(raw_data.value_counts())

"""It is very clearly visible that the postal code of superstore is in no way contribute to the model so we can drop this feature from our raw_data"""

raw_data=raw_data.drop(columns=['Postal Code'],axis=1)

"""DATA VISULIZATION USING MATPLOTLIB AND **SEABORN**"""

print(raw_data['State'].value_counts())
plt.figure(figsize=(15,8))
sns.countplot(x=raw_data['State'])
plt.xticks(rotation=90)
plt.show()

print(raw_data['Sub-Category'].value_counts())
plt.figure(figsize=(12,6))
sns.countplot(x=raw_data['Sub-Category'])
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(16,8))
plt.bar('Sub-Category','Category', data=raw_data)
plt.show()

print(raw_data['State'].value_counts())
plt.figure(figsize=(15,8))
sns.countplot(x=raw_data['State'])
plt.xticks(rotation=90)
plt.show()

print(raw_data['Sub-Category'].value_counts())
plt.figure(figsize=(12,6))
sns.countplot(x=raw_data['Sub-Category'])
plt.xticks(rotation=90)
plt.show()

"""
A heatmap contains values representing various shades of the same colour for each value to be plotted. Usually the darker shades of the chart represent higher values than the lighter shade. For a very different value a completely different colour can also be used."""

fig,axes = plt.subplots(1,1,figsize=(9,6))
sns.heatmap(raw_data.corr(), annot= True)
plt.show()

sns.countplot(x=raw_data['Segment'])

sns.countplot(x=raw_data['Region'])

"""A line plot is a graph that shows frequency of data along a number line. It is best to use a line plot when comparing fewer than 25 numbers. It is a quick, simple way to organize data."""

plt.figure(figsize = (10,4))
sns.lineplot('Discount', 'Profit', data = raw_data, color = 'r', label= 'Discount')
plt.legend()

raw_data.hist(bins=50 ,figsize=(20,15))
plt.show()

figsize=(15,10)
sns.pairplot(raw_data,hue='Sub-Category')

grouped=pd.DataFrame(raw_data.groupby(['Ship Mode','Segment','Category','Sub-Category','State','Region'])['Quantity','Discount','Sales','Profit'].sum().reset_index())
grouped

sns.pairplot(raw_data)

"""
A Box Plot is also known as Whisker plot is created to display the summary of the set of data values having properties like minimum, first quartile, median, third quartile and maximum. """

fig, axes = plt.subplots(figsize = (10 , 10))

sns.boxplot(raw_data['Sales'])

print(raw_data['Sales'].describe())
plt.figure(figsize = (9 , 8))
sns.distplot(raw_data['Sales'], color = 'b', bins = 100, hist_kws = {'alpha': 0.4});

fig, axes = plt.subplots(figsize = (10 , 10))

sns.boxplot(raw_data['Profit'])

"""### CALCULATING THE INTERQUARTILE RANGE FOR THE DATASET"""

Quartile_1 = raw_data.quantile(q = 0.25, axis = 0, numeric_only = True, interpolation = 'linear')

Quartile_3 = raw_data.quantile(q = 0.75, axis = 0, numeric_only = True, interpolation = 'linear')

Inter_quartile_range=Quartile_3-Quartile_1

Inter_quartile_range

fig, ax = plt.subplots(figsize = (10 , 6))
ax.scatter(raw_data["Sales"] ,raw_data["Profit"])
ax.set_xlabel('Sales')
ax.set_ylabel('Profit')
plt.show()

"""### CALCULATING THE OUTLIER RANGE FOR THE DATASET FOR EACH OF THE FOLLOWING FEATURES OF THE DATASET"""

x=Quartile_1-1.5*Inter_quartile_range
y=Quartile_3+1.5*Inter_quartile_range

print("The outliers will be less than\n",x,"\nand will be greater than\n",y,"for each of the following features")

grouped=pd.DataFrame(raw_data.groupby(['Ship Mode','Segment','Category','Sub-Category','State','Region'])['Quantity','Discount','Sales','Profit'].sum().reset_index())
grouped

raw_data.groupby("State").Profit.agg(["sum","mean","min","max","count","median","std","var"])

x = data.iloc[:, [9, 10, 11, 12]].values
from sklearn.cluster import KMeans
wcss = []

for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', 
                    max_iter = 300, n_init = 10, random_state = 0).fit(x)
    wcss.append(kmeans.inertia_)

sns.set_style("whitegrid") 
sns.FacetGrid(data, hue ="Sub-Category",height = 6).map(plt.scatter,'Sales','Quantity')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], 
            s = 100, c = 'yellow', label = 'Centroids')

plt.legend()

#profit vs ship mode
sns.barplot(x=raw_data['Ship Mode'],y=raw_data['Profit'],palette='rainbow')

"""RESULT=STANDARD CLASS HAS THE MOST ORDERS

"""

state= raw_data[['State']].value_counts()

state.plot.pie(autopct='%1.1f%%',rotatelabels=True)

"""The States that generated the most orders were California , New York , texas , Pennsylvania , Washington"""

raw_data.groupby('State').sum().sort_values('Profit').tail()

"""Result=The top 5 States generating most profits are California , New York , Washington , Michigan , Virginia"""

newdf = raw_data[raw_data['State'].isin(['California','New York','Washington','Michigan','Virginia'])]
newdf.info()
sns.countplot(x='State', hue='Ship Mode',data=newdf,palette='rainbow')

"""the preferred shipping Mode of the top 5 states generating most profit was Standard Class

"""

